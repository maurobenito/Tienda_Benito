@{
    ViewData["Title"] = "Nueva Venta (Vue)";
}

<h2>Nueva Venta</h2>

<div id="app">
    <!-- CLIENTE -->
    <div class="form-group">
        <label><strong>Buscar Cliente</strong></label>
        <input type="text" class="form-control" v-model="clienteBusqueda" @@input="buscarClientes">
        <ul class="list-group" v-if="clientes.length">
            <li class="list-group-item" v-for="c in clientes" @@click="seleccionarCliente(c)">
                {{ c.nombreCompleto }}
            </li>
        </ul>
        <div v-if="clienteSeleccionado">
            <strong>Cliente Seleccionado:</strong> {{ clienteSeleccionado.nombreCompleto }}
        </div>
    </div>

    <hr>

    <!-- RUBRO Y PRODUCTOS -->
    <div class="row">
        <div class="col-md-6">
            <label><strong>Filtrar por Rubro</strong></label>
            <select class="form-control" v-model="rubroSeleccionado" @@change="filtrarProductosPorRubro">
                <option disabled value="">-- Seleccione un rubro --</option>
                <option v-for="r in rubros" :value="r.rubroId">{{ r.nombre }}</option>
            </select>
        </div>
        <div class="col-md-6">
            <label><strong>Buscar Producto por nombre</strong></label>
            <input type="text" class="form-control" v-model="productoBusqueda" @@input="buscarProductos">
        </div>
    </div>

    <div class="mt-3">
        <ul class="list-group" v-if="productos.length">
            <li class="list-group-item d-flex justify-content-between align-items-center"
                v-for="p in productos" @@click="agregarProducto(p)">
                {{ p.nombre }} - ${{ p.precioVenta }} (Stock: {{ p.stock }})
                <button class="btn btn-primary btn-sm">Agregar</button>
            </li>
        </ul>
    </div>

    <hr>

    <!-- CARRITO -->
    <h4>Carrito</h4>
    <table class="table table-bordered" v-if="carrito.length">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Precio Unitario</th>
                <th>Cantidad</th>
                <th>Subtotal</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr v-for="(item, index) in carrito">
                <td>{{ item.nombre }}</td>
                <td>${{ item.precioVenta.toFixed(2) }}</td>
                <td>
                    <input type="number" class="form-control" v-model.number="item.cantidad"
                           min="1" :max="item.stock" @@change="actualizarTotal">
                </td>
                <td>${{ (item.precioVenta * item.cantidad).toFixed(2) }}</td>
                <td><button class="btn btn-danger btn-sm" @@click="quitarProducto(index)">Quitar</button></td>
            </tr>
        </tbody>
    </table>

    <div v-if="carrito.length">
        <h4>Total: ${{ total.toFixed(2) }}</h4>
        <button class="btn btn-success" @@click="confirmarVenta">Confirmar Venta</button>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        new Vue({
            el: '#app',
            data: {
                clienteBusqueda: '',
                clientes: [],
                clienteSeleccionado: null,
                productoBusqueda: '',
                productos: [],
                carrito: [],
                total: 0,
                usuarioId: 1, // fijo
                rubros: [],
                rubroSeleccionado: ''
            },
            mounted() {
                this.cargarRubros();
            },
            methods: {
                cargarRubros() {
                    axios.get('/Rubro/GetRubrosJson')
                        .then(res => this.rubros = res.data);
                },
                buscarClientes() {
                    if (this.clienteBusqueda.length < 2) return this.clientes = [];
                    axios.get('/api/clientes/buscar?query=' + this.clienteBusqueda)
                        .then(res => this.clientes = res.data);
                },
                seleccionarCliente(cliente) {
                    this.clienteSeleccionado = cliente;
                    this.clienteBusqueda = cliente.nombreCompleto;
                    this.clientes = [];
                },
                buscarProductos() {
                    if (this.productoBusqueda.length < 2) return this.productos = [];
                    axios.get('/api/productos/buscar?query=' + this.productoBusqueda)
                        .then(res => this.productos = res.data);
                },
                filtrarProductosPorRubro() {
                    if (!this.rubroSeleccionado) return;
                    axios.get('/api/productos/porrubro/' + this.rubroSeleccionado)
                        .then(res => this.productos = res.data);
                },
                agregarProducto(producto) {
                    const existente = this.carrito.find(p => p.productoId === producto.productoId);
                    if (existente) {
                        if (existente.cantidad < producto.stock) existente.cantidad++;
                    } else {
                        this.carrito.push({ ...producto, cantidad: 1 });
                    }
                    this.actualizarTotal();
                },
                quitarProducto(index) {
                    this.carrito.splice(index, 1);
                    this.actualizarTotal();
                },
                actualizarTotal() {
                    this.total = this.carrito.reduce((suma, p) => suma + (p.precioVenta * p.cantidad), 0);
                },
                confirmarVenta() {
                    if (!this.clienteSeleccionado || !this.carrito.length) {
                        alert("Seleccione un cliente y al menos un producto.");
                        return;
                    }
                    const datos = {
                        clienteId: this.clienteSeleccionado.clienteId,
                        usuarioId: this.usuarioId,
                        total: this.total,
                        productos: this.carrito.map(p => ({
                            productoId: p.productoId,
                            cantidad: p.cantidad,
                            precioUnitario: p.precioVenta
                        }))
                    };
                    axios.post('/api/ventas/crear', datos)
                        .then(r => {
                            alert('Venta registrada. ID: ' + r.data.ventaId);
                            location.reload();
                        })
                        .catch(e => alert('Error: ' + e));
                }
            }
        });
    </script>
}
