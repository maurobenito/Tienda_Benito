@{
    ViewData["Title"] = "Nueva Venta (Vue)";
}

<h2>Nueva Venta</h2>

<div id="app">
    <!-- CLIENTE -->
    <div class="form-group">
        <label>Buscar Cliente (autocompletar o seleccionar)</label>
        <input type="text" class="form-control mb-2" v-model="clienteBusqueda" @input="buscarClientes" placeholder="Buscar por nombre...">

        <ul class="list-group mb-2" v-if="clientesFiltrados.length">
            <li class="list-group-item" v-for="c in clientesFiltrados" @click="seleccionarCliente(c)">
                {{ c.nombreCompleto }}
            </li>
        </ul>

        <label>O seleccionar cliente</label>
        <select class="form-control mb-2" v-model="clienteSeleccionadoId" @change="cargarClienteSeleccionado">
            <option disabled value="">-- Seleccionar --</option>
            <option v-for="c in clientes" :value="c.clienteId">{{ c.nombreCompleto }}</option>
        </select>

        <div v-if="clienteSeleccionado">
            <strong>Cliente Seleccionado:</strong> {{ clienteSeleccionado.nombreCompleto }}
        </div>
    </div>

    <!-- PRODUCTOS -->
    <div class="form-group">
        <label>Productos Disponibles</label>
        <table class="table table-sm table-hover">
            <thead>
                <tr>
                    <th>Producto</th>
                    <th>Precio</th>
                    <th>Stock</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="p in productos">
                    <td>{{ p.nombre }}</td>
                    <td>${{ p.precioVenta.toFixed(2) }}</td>
                    <td>{{ p.stock }}</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @click="agregarProducto(p)">Agregar</button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <!-- CARRITO -->
    <h4>Carrito</h4>
    <table class="table table-bordered" v-if="carrito.length">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Precio Unitario</th>
                <th>Cantidad</th>
                <th>Subtotal</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr v-for="(item, index) in carrito">
                <td>{{ item.nombre }}</td>
                <td>${{ item.precioVenta.toFixed(2) }}</td>
                <td>
                    <input type="number" v-model.number="item.cantidad" min="1" :max="item.stock" class="form-control form-control-sm" @change="actualizarTotal">
                </td>
                <td>${{ (item.precioVenta * item.cantidad).toFixed(2) }}</td>
                <td><button class="btn btn-danger btn-sm" @click="quitarProducto(index)">Quitar</button></td>
            </tr>
        </tbody>
    </table>

    <div v-if="carrito.length">
        <h4>Total: ${{ total.toFixed(2) }}</h4>
        <button class="btn btn-success" @click="confirmarVenta">Confirmar Venta</button>
    </div>
</div>

@section Scripts {
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    new Vue({
        el: '#app',
        data: {
            clienteBusqueda: '',
            clienteSeleccionado: null,
            clienteSeleccionadoId: '',
            clientes: [],
            clientesFiltrados: [],
            productos: [],
            carrito: [],
            total: 0,
            usuarioId: 1
        },
        created() {
            this.cargarClientes();
            this.cargarProductos();
        },
        methods: {
            cargarClientes() {
                axios.get('/api/clientes/todos')
                    .then(res => this.clientes = res.data);
            },
            cargarProductos() {
                axios.get('/api/productos/todos')
                    .then(res => this.productos = res.data);
            },
            buscarClientes() {
                const texto = this.clienteBusqueda.toLowerCase();
                this.clientesFiltrados = this.clientes.filter(c =>
                    c.nombreCompleto.toLowerCase().includes(texto));
            },
            seleccionarCliente(c) {
                this.clienteSeleccionado = c;
                this.clienteSeleccionadoId = c.clienteId;
                this.clienteBusqueda = '';
                this.clientesFiltrados = [];
            },
            cargarClienteSeleccionado() {
                const c = this.clientes.find(x => x.clienteId == this.clienteSeleccionadoId);
                if (c) this.clienteSeleccionado = c;
            },
            agregarProducto(producto) {
                const existe = this.carrito.find(p => p.productoId === producto.productoId);
                if (existe) {
                    if (existe.cantidad < producto.stock)
                        existe.cantidad++;
                } else {
                    this.carrito.push({ ...producto, cantidad: 1 });
                }
                this.actualizarTotal();
            },
            quitarProducto(i) {
                this.carrito.splice(i, 1);
                this.actualizarTotal();
            },
            actualizarTotal() {
                this.total = this.carrito.reduce((acc, p) => acc + (p.precioVenta * p.cantidad), 0);
            },
            confirmarVenta() {
                if (!this.clienteSeleccionado || this.carrito.length === 0) {
                    alert("Seleccione un cliente y agregue al menos un producto.");
                    return;
                }

                const datos = {
                    clienteId: this.clienteSeleccionado.clienteId,
                    usuarioId: this.usuarioId,
                    total: this.total,
                    productos: this.carrito.map(p => ({
                        productoId: p.productoId,
                        cantidad: p.cantidad,
                        precioUnitario: p.precioVenta
                    }))
                };

                axios.post('/api/ventas/crear', datos)
                    .then(res => {
                        alert("Venta registrada correctamente. ID: " + res.data.ventaId);
                        location.reload();
                    })
                    .catch(err => {
                        alert("Error al guardar la venta.");
                        console.error(err);
                    });
            }
        }
    });
</script>
}
